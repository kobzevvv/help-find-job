name: Deploy to Production

# Only deploy to production when pull requests are merged to main
# This ensures code has been reviewed and tested in staging first
on:
  push:
    branches: [main]
  # Allow manual deployment for emergency releases
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual deployment'
        required: true
        default: 'Emergency release'

permissions:
  contents: read
  issues: write

jobs:
  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Production Environment
    # Only run if this is a push to main (indicating a merged PR)
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Get full history for better deployment tracking
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run type-check

      - name: Build application
        run: npm run build:ci

      - name: Run tests
        run: npm test

      - name: Production deployment pre-flight checks
        run: |
          echo "üöÄ Starting production deployment pre-flight checks..."
          echo "üì¶ Repository: ${{ github.repository }}"
          echo "üåø Branch: ${{ github.ref_name }}"
          echo "üî¢ Commit: ${{ github.sha }}"
          
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "‚ö†Ô∏è Manual deployment triggered"
            echo "üìù Reason: ${{ github.event.inputs.reason }}"
          else
            echo "‚úÖ Automatic deployment from merged PR"
          fi

      - name: Check production deployment prerequisites  
        run: |
          echo "üîç Checking production deployment prerequisites..."
          
          if [ -z "${{ secrets.CLOUDFLARE_API_TOKEN }}" ]; then
            echo "‚ùå CLOUDFLARE_API_TOKEN secret is not set"
            echo "üìã Please set this secret in GitHub repository settings"
            echo "üîó Guide: https://github.com/${{ github.repository }}/blob/main/.github/SECRETS_SETUP.md"
            exit 1
          else
            echo "‚úÖ CLOUDFLARE_API_TOKEN is set"
          fi
          
          if [ -z "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}" ]; then
            echo "‚ùå CLOUDFLARE_ACCOUNT_ID secret is not set"
            echo "üìã Please set this secret in GitHub repository settings"
            exit 1
          else
            echo "‚úÖ CLOUDFLARE_ACCOUNT_ID is set"
          fi
          
          if [ -z "${{ secrets.TELEGRAM_BOT_TOKEN_PRODUCTION }}" ]; then
            echo "‚ùå TELEGRAM_BOT_TOKEN_PRODUCTION secret is not set"
            echo "üìã Please set the production bot token in GitHub repository settings"
            echo "‚ö†Ô∏è Use a different bot token than staging for security"
            exit 1
          else
            echo "‚úÖ TELEGRAM_BOT_TOKEN_PRODUCTION is set"
          fi
          
          if [ -z "${{ secrets.OPENAI_API_KEY_PRODUCTION }}" ]; then
            echo "‚ö†Ô∏è OPENAI_API_KEY_PRODUCTION secret is not set"
            echo "üìã AI features will not work in production"
          else
            echo "‚úÖ OPENAI_API_KEY_PRODUCTION is set"
          fi
          
          if [ -z "${{ secrets.WEBHOOK_SECRET_PRODUCTION }}" ]; then
            echo "‚ö†Ô∏è WEBHOOK_SECRET_PRODUCTION not set, using default"
            echo "üìã Consider setting a unique webhook secret for production security"
          else
            echo "‚úÖ WEBHOOK_SECRET_PRODUCTION is set"
          fi

      - name: Deploy to Cloudflare Workers (Production)
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy --env production
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN_PRODUCTION }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_PRODUCTION }}
          WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET_PRODUCTION || 'production-webhook-secret-default' }}
          ADMIN_PASSWORD_PRODUCTION: ${{ secrets.ADMIN_PASSWORD_PRODUCTION || 'admin123' }}

      - name: Set production webhook
        if: success()
        run: |
          echo "üîó Setting up production webhook..."
          
          # Extract bot token for webhook setup
          BOT_TOKEN="${{ secrets.TELEGRAM_BOT_TOKEN_PRODUCTION }}"
          WEBHOOK_SECRET="${{ secrets.WEBHOOK_SECRET_PRODUCTION || 'production-webhook-secret-default' }}"
          
          # Get the production worker URL from wrangler.toml
          WORKER_URL="https://help-with-job-search-telegram-bot.$(echo '${{ secrets.CLOUDFLARE_ACCOUNT_ID }}' | head -c 8).workers.dev"
          
          echo "üåê Setting webhook URL: ${WORKER_URL}/webhook"
          
          RESPONSE=$(curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/setWebhook" \
            -H "Content-Type: application/json" \
            -d "{\"url\": \"${WORKER_URL}/webhook\", \"secret_token\": \"${WEBHOOK_SECRET}\"}")
          
          echo "üìû Webhook response: $RESPONSE"
          
          # Check if webhook was set successfully
          if echo "$RESPONSE" | grep -q '"ok":true'; then
            echo "‚úÖ Production webhook set successfully"
          else
            echo "‚ùå Failed to set production webhook"
            echo "üîç Response: $RESPONSE"
            exit 1
          fi

      - name: Health check production deployment
        if: success()
        run: |
          echo "üè• Running production health check..."
          
          # Get the production worker URL
          WORKER_URL="https://help-with-job-search-telegram-bot.$(echo '${{ secrets.CLOUDFLARE_ACCOUNT_ID }}' | head -c 8).workers.dev"
          
          echo "üîç Checking: ${WORKER_URL}/health"
          
          # Wait a moment for deployment to stabilize
          sleep 10
          
          # Perform health check
          HEALTH_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "${WORKER_URL}/health" || echo "000")
          
          if [ "$HEALTH_RESPONSE" = "200" ]; then
            echo "‚úÖ Production health check passed (HTTP $HEALTH_RESPONSE)"
          else
            echo "‚ö†Ô∏è Production health check returned HTTP $HEALTH_RESPONSE"
            echo "üîç This might be normal if the /health endpoint is not implemented"
          fi

      - name: Create deployment issue for tracking
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const deploymentTime = new Date().toISOString();
            const commitSha = context.sha.substring(0, 8);
            const deploymentReason = context.eventName === 'workflow_dispatch' 
              ? `Manual deployment: ${{ github.event.inputs.reason }}`
              : 'Automatic deployment from merged PR';
            
            const issueBody = `## üöÄ Production Deployment Completed
            
            **üìÖ Deployment Time**: ${deploymentTime}
            **üî¢ Commit**: ${commitSha}
            **üåø Branch**: ${{ github.ref_name }}
            **üìù Reason**: ${deploymentReason}
            
            ### ü§ñ Production Bot Information
            - **Environment**: Production
            - **Worker Name**: help-with-job-search-telegram-bot
            - **Deployment**: Cloudflare Workers
            
            ### ‚úÖ Deployment Checklist
            - [x] TypeScript compilation successful
            - [x] Tests passed
            - [x] Cloudflare Workers deployment successful
            - [x] Production webhook configured
            - [x] Health check completed
            
            ### üîç Monitoring
            Please monitor the production bot for the next 30 minutes to ensure:
            1. Bot responds to /start command
            2. Resume analysis features work correctly
            3. No error spikes in Cloudflare Analytics
            4. Performance remains stable
            
            ### üö® Rollback Procedure
            If issues are detected, rollback using:
            \`\`\`bash
            wrangler rollback --env production
            \`\`\`
            
            ---
            **ü§ñ Automated deployment tracking issue**
            Deployment ID: ${context.runId}`;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üöÄ Production Deployment - ${commitSha} - ${deploymentTime}`,
              body: issueBody,
              labels: ['deployment', 'production']
            });

      - name: Deployment summary
        if: always()
        run: |
          echo "üìä Production Deployment Summary"
          echo "================================"
          echo "üì¶ Repository: ${{ github.repository }}"
          echo "üåø Branch: ${{ github.ref_name }}"
          echo "üî¢ Commit: ${{ github.sha }}"
          echo "üïê Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "üöÄ Status: ${{ job.status }}"
          
          if [ "${{ job.status }}" = "success" ]; then
            echo "‚úÖ Production deployment completed successfully!"
            echo "ü§ñ The production Telegram bot is now running the latest version"
            echo "üì± Users can interact with the updated bot immediately"
          else
            echo "‚ùå Production deployment failed"
            echo "üîç Check the logs above for error details"
            echo "üìû Consider rolling back if necessary"
          fi
