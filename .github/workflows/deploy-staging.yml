name: Deploy to Staging (v2)

# Advanced staging deployment with artifact inheritance
on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild instead of using cached artifacts'
        required: false
        default: false
        type: boolean
      reason:
        description: 'Reason for manual deployment'
        required: false
        default: 'Manual staging deployment'

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  # Run quality gates first or inherit from previous run
  quality-gates:
    uses: ./.github/workflows/quality-gates.yml
    secrets: inherit

  deploy-staging:
    name: Deploy to Staging Environment
    runs-on: ubuntu-latest
    needs: quality-gates
    if: needs.quality-gates.outputs.build-success == 'true'
    
    environment:
      name: staging
      url: https://help-with-job-search-telegram-bot-staging.vova-likes-smoothy.workers.dev
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Restore build artifacts
        uses: actions/cache@v4
        id: restore-build
        with:
          path: |
            dist/
            coverage/
          key: ${{ needs.quality-gates.outputs.build-cache-key }}
          restore-keys: |
            build-${{ runner.os }}-
      
      - name: Rebuild if cache miss or forced
        if: steps.restore-build.outputs.cache-hit != 'true' || github.event.inputs.force_rebuild == 'true'
        run: |
          echo "üîÑ Building application (cache miss or forced rebuild)"
          npm run build:ci
      
      - name: Validate build artifacts
        run: |
          if [ ! -f "dist/index.js" ]; then
            echo "‚ùå dist/index.js not found - build failed"
            exit 1
          fi
          echo "‚úÖ Build artifacts validated"
      
      - name: Pre-deployment environment check
        run: |
          echo "üîç Checking staging deployment prerequisites..."
          
          # Check required secrets
          if [ -z "${{ secrets.CLOUDFLARE_API_TOKEN }}" ]; then
            echo "‚ùå CLOUDFLARE_API_TOKEN secret is not set"
            exit 1
          fi
          
          if [ -z "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}" ]; then
            echo "‚ùå CLOUDFLARE_ACCOUNT_ID secret is not set"
            exit 1
          fi
          
          # Optional checks
          if [ -z "${{ secrets.OPENAI_API_KEY_STAGING }}" ]; then
            echo "‚ö†Ô∏è OPENAI_API_KEY_STAGING not set - AI features disabled"
          else
            echo "‚úÖ OPENAI_API_KEY_STAGING configured"
          fi
          
          echo "‚úÖ Staging prerequisites validated"
      
      - name: Deploy to Cloudflare Workers (Staging)
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy --env staging
        env:
          # Environment-specific variables
          TELEGRAM_BOT_TOKEN: "8358869176:AAGo9WKrpUnbLBD-Zq40DIPpfdoBZroPVfI"
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_STAGING }}
          WEBHOOK_SECRET: "3c8a4efeb4b36eed52758eb194300a89d3074567299b3a826ea0922100a16752"
          ADMIN_PASSWORD_STAGING: "12354678"
          
          # New environment-specific configuration
          BOT_TOKEN_STAGING: "8358869176:AAGo9WKrpUnbLBD-Zq40DIPpfdoBZroPVfI"
          BOT_USERNAME_STAGING: "job_search_help_staging_bot"
          WORKER_NAME_STAGING: "help-with-job-search-telegram-bot-staging"
          WORKER_URL_STAGING: "https://help-with-job-search-telegram-bot-staging.vova-likes-smoothy.workers.dev"
          DEBUG_LOGGING_STAGING: "true"
      
      - name: Configure staging webhook
        if: success()
        run: |
          echo "üîó Configuring staging webhook..."
          
          WEBHOOK_URL="https://help-with-job-search-telegram-bot-staging.vova-likes-smoothy.workers.dev/webhook"
          BOT_TOKEN="8358869176:AAGo9WKrpUnbLBD-Zq40DIPpfdoBZroPVfI"
          WEBHOOK_SECRET="3c8a4efeb4b36eed52758eb194300a89d3074567299b3a826ea0922100a16752"
          
          RESPONSE=$(curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/setWebhook" \
            -H "Content-Type: application/json" \
            -d "{\"url\": \"${WEBHOOK_URL}\", \"secret_token\": \"${WEBHOOK_SECRET}\"}")
          
          echo "üìû Webhook response: $RESPONSE"
          
          if echo "$RESPONSE" | grep -q '"ok":true'; then
            echo "‚úÖ Staging webhook configured successfully"
          else
            echo "‚ùå Failed to configure staging webhook"
            echo "üîç Response: $RESPONSE"
            exit 1
          fi
      
      - name: Post-deployment health check
        if: success()
        run: |
          echo "üè• Running staging health checks..."
          
          STAGING_URL="https://help-with-job-search-telegram-bot-staging.vova-likes-smoothy.workers.dev"
          
          # Wait for deployment to stabilize
          echo "‚è≥ Waiting 15 seconds for deployment stabilization..."
          sleep 15
          
          # Health check
          echo "üîç Checking: ${STAGING_URL}/health"
          HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${STAGING_URL}/health" || echo "000")
          
          if [ "$HEALTH_STATUS" = "200" ]; then
            echo "‚úÖ Staging health check passed (HTTP $HEALTH_STATUS)"
          else
            echo "‚ö†Ô∏è Health check returned HTTP $HEALTH_STATUS"
            echo "üîç Attempting basic connectivity test..."
            
            BASIC_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$STAGING_URL" || echo "000")
            if [ "$BASIC_STATUS" = "200" ] || [ "$BASIC_STATUS" = "404" ]; then
              echo "‚úÖ Basic connectivity OK (HTTP $BASIC_STATUS)"
            else
              echo "‚ùå Staging deployment may have failed"
              exit 1
            fi
          fi
      
      - name: Run staging smoke tests
        if: success()
        run: |
          echo "üß™ Running staging smoke tests..."
          
          # Test basic Telegram webhook endpoint
          STAGING_URL="https://help-with-job-search-telegram-bot-staging.vova-likes-smoothy.workers.dev/webhook"
          
          # Test with invalid request (should return 4xx, not 5xx)
          WEBHOOK_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X POST "$STAGING_URL" \
            -H "Content-Type: application/json" \
            -d '{"test": "smoke"}' || echo "000")
          
          if [[ "$WEBHOOK_STATUS" =~ ^[2-4][0-9][0-9]$ ]]; then
            echo "‚úÖ Webhook endpoint responsive (HTTP $WEBHOOK_STATUS)"
          else
            echo "‚ö†Ô∏è Webhook endpoint returned HTTP $WEBHOOK_STATUS"
          fi
          
          echo "‚úÖ Staging smoke tests completed"

  post-deployment:
    name: Post-Deployment Activities
    runs-on: ubuntu-latest
    needs: [quality-gates, deploy-staging]
    if: success()
    
    steps:
      - name: Create deployment tracking issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const deploymentTime = new Date().toISOString();
            const commitSha = context.sha.substring(0, 8);
            const deploymentReason = context.eventName === 'workflow_dispatch' 
              ? `Manual deployment: ${{ github.event.inputs.reason }}`
              : 'Automatic staging deployment from main branch';
            
            const issueBody = `## üîÑ Staging Deployment Completed
            
            **üìÖ Deployment Time**: ${deploymentTime}
            **üî¢ Commit**: ${commitSha}
            **üåø Branch**: ${{ github.ref_name }}
            **üìù Reason**: ${deploymentReason}
            **üèóÔ∏è Workflow**: Advanced CI/CD v2
            
            ### üß™ Quality Gates Results
            - [x] Code quality checks passed
            - [x] Type checking passed
            - [x] All tests passed (Unit, Integration, E2E)
            - [x] Build artifacts cached and validated
            
            ### üöÄ Staging Environment
            - **Bot**: @job_search_help_staging_bot
            - **URL**: https://help-with-job-search-telegram-bot-staging.vova-likes-smoothy.workers.dev
            - **Health Check**: ‚úÖ Passed
            - **Smoke Tests**: ‚úÖ Passed
            
            ### üìã Ready for Production
            This staging deployment is ready for promotion to production when approved.
            
            ### ü§ñ Test the Staging Bot
            1. Start a conversation with @job_search_help_staging_bot
            2. Test resume analysis features
            3. Verify all functionality works as expected
            
            ---
            **ü§ñ Automated deployment tracking**
            Deployment ID: ${context.runId}`;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üîÑ Staging Deployment - ${commitSha} - ${deploymentTime}`,
              body: issueBody,
              labels: ['deployment', 'staging', 'ready-for-production']
            });
      
      - name: Deployment summary
        run: |
          echo "üìä Advanced Staging Deployment Summary"
          echo "======================================="
          echo "üì¶ Repository: ${{ github.repository }}"
          echo "üåø Branch: ${{ github.ref_name }}"
          echo "üî¢ Commit: ${{ github.sha }}"
          echo "üïê Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "üèóÔ∏è Architecture: Advanced CI/CD v2"
          echo "üìã Build Cache: ${{ needs.quality-gates.outputs.build-cache-key }}"
          echo ""
          echo "‚úÖ Staging deployment completed successfully!"
          echo "ü§ñ Staging bot: @job_search_help_staging_bot"
          echo "üåê Staging URL: https://help-with-job-search-telegram-bot-staging.vova-likes-smoothy.workers.dev"
          echo "üîÑ Ready for production promotion"
