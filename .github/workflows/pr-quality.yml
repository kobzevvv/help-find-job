name: PR Quality Assistant

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main, develop ]

jobs:
  quality-assistant:
    name: Quality Assistant
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Check for auto-fixable issues
      id: lint-check
      run: |
        if npm run lint:fix --silent; then
          echo "autofix=true" >> $GITHUB_OUTPUT
        else
          echo "autofix=false" >> $GITHUB_OUTPUT
        fi

    - name: Check formatting
      id: format-check
      run: |
        if npm run format --silent; then
          echo "formatted=true" >> $GITHUB_OUTPUT
        else
          echo "formatted=false" >> $GITHUB_OUTPUT
        fi

    - name: Comment on PR
      if: steps.lint-check.outputs.autofix == 'true' || steps.format-check.outputs.formatted == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const { autofix, formatted } = ${{ steps.lint-check.outputs.autofix == 'true' || steps.format-check.outputs.formatted == 'true' }};

          let message = '## 🤖 Code Quality Assistant\n\n';
          message += 'I\'ve detected some code quality issues that can be automatically fixed:\n\n';

          if ('${{ steps.lint-check.outputs.autofix }}' === 'true') {
            message += '✅ **ESLint issues fixed** - Auto-fixed linting problems\n';
          }

          if ('${{ steps.format-check.outputs.formatted }}' === 'true') {
            message += '✅ **Code formatted** - Applied Prettier formatting\n';
          }

          message += '\n### Next Steps:\n';
          message += '1. **Pull the latest changes** from this branch\n';
          message += '2. **Review the auto-fixes** in your IDE\n';
          message += '3. **Commit and push** the fixes\n';
          message += '\n### Local Development:\n';
          message += '```bash\n';
          message += '# Auto-fix all issues\n';
          message += 'npm run quality:fix\n';
          message += '\n';
          message += '# Check everything is good\n';
          message += 'npm run quality\n';
          message += '```\n\n';
          message += '📖 **Need help?** Check our [Code Quality Guide](./docs/CODE_QUALITY_GUIDE.md)';

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: message
          });

  suggest-improvements:
    name: Suggest Improvements
    runs-on: ubuntu-latest
    timeout-minutes: 3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Analyze code quality
      id: quality-analysis
      run: |
        # Count TypeScript files
        ts_files=$(find src -name "*.ts" -o -name "*.tsx" | wc -l)

        # Count any types
        any_count=$(grep -r "any" src --include="*.ts" --include="*.tsx" | wc -l)

        # Calculate quality score
        if [ "$any_count" -gt 0 ]; then
          quality_score=$((100 - (any_count * 2)))
        else
          quality_score=100
        fi

        if [ "$quality_score" -lt 0 ]; then
          quality_score=0
        fi

        echo "quality_score=$quality_score" >> $GITHUB_OUTPUT
        echo "ts_files=$ts_files" >> $GITHUB_OUTPUT
        echo "any_count=$any_count" >> $GITHUB_OUTPUT

    - name: Quality Insights
      uses: actions/github-script@v7
      with:
        script: |
          const qualityScore = ${{ steps.quality-analysis.outputs.quality_score }};
          const tsFiles = ${{ steps.quality-analysis.outputs.ts_files }};
          const anyCount = ${{ steps.quality-analysis.outputs.any_count }};

          let message = '## 📊 Code Quality Insights\n\n';
          message += `**Quality Score:** ${qualityScore}/100\n\n`;

          if (anyCount > 0) {
            message += `⚠️ **${anyCount} 'any' types found** - Consider using specific types\n\n`;
          }

          message += `📁 **${tsFiles} TypeScript files** analyzed\n\n`;

          if (qualityScore < 80) {
            message += '### Suggestions:\n';
            message += '- Replace `any` types with specific interfaces\n';
            message += '- Use union types instead of `any` where appropriate\n';
            message += '- Consider using `unknown` for truly dynamic data\n';
          }

          message += '\n📖 Learn more in our [Code Quality Guide](./docs/CODE_QUALITY_GUIDE.md)';

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: message
          });
