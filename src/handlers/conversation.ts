/**
 * Simplified Telegram conversation handler
 * Supports only two commands: /send_resume and /send_job_ad
 */

import { LoggingService } from '../services/logging';
import { ResumeProcessorService } from '../services/resume-processor';
import { SessionService } from '../services/session';
import { TelegramService } from '../services/telegram';
import { TelegramMessage } from '../types/telegram';

export class ConversationHandler {
  private sessionService: SessionService;
  private telegramService: TelegramService;
  private loggingService: LoggingService;
  private resumeProcessorService: ResumeProcessorService;
  private ai: unknown; // Cloudflare AI binding

  constructor(
    sessionService: SessionService,
    telegramService: TelegramService,
    loggingService: LoggingService,
    resumeProcessorService: ResumeProcessorService,
    ai?: unknown
  ) {
    this.sessionService = sessionService;
    this.telegramService = telegramService;
    this.loggingService = loggingService;
    this.resumeProcessorService = resumeProcessorService;
    this.ai = ai;
  }

  /**
   * Handle incoming message
   */
  async handleMessage(message: TelegramMessage): Promise<void> {
    const userId = message.from?.id;
    const chatId = message.chat.id;

    if (!userId) {
      console.error('‚ùå Missing user ID in message');
      return;
    }

    try {
      // Log the message
      await this.loggingService.logUserMessage(
        userId,
        chatId,
        message.text || 'document',
        {
          messageId: message.message_id,
        }
      );

      // Handle commands
      if (message.text?.startsWith('/')) {
        await this.handleCommand(message.text, chatId, userId);
        return;
      }

      // Handle different message types
      if (message.text) {
        await this.handleTextMessage(message, chatId, userId);
      } else if (message.document) {
        await this.handleDocumentMessage(message, chatId, userId);
      } else {
        await this.telegramService.sendMessage({
          chat_id: chatId,
          text: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, PDF —Ñ–∞–π–ª –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /send_resume –∏–ª–∏ /send_job_ad',
        });
      }
    } catch (error) {
      console.error('üí• MESSAGE HANDLER ERROR:', error);
      await this.telegramService.sendMessage({
        chat_id: chatId,
        text: '‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.',
      });
    }
  }

  /**
   * Handle text messages
   */
  private async handleTextMessage(
    message: TelegramMessage,
    chatId: number,
    userId: number
  ): Promise<void> {
    const text = message.text!;

    // Get current session state
    const session = await this.sessionService.getSession(userId);
    const state = session?.state || 'idle';

    switch (state) {
      case 'collecting_resume':
        await this.handleResumeText(text, chatId, userId);
        break;

      case 'collecting_job_ad':
        await this.handleJobAdText(text, chatId, userId);
        break;

      default:
        await this.telegramService.sendMessage({
          chat_id: chatId,
          text: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /send_resume –∏–ª–∏ /send_job_ad –¥–ª—è –Ω–∞—á–∞–ª–∞.',
        });
    }
  }

  /**
   * Handle commands
   */
  private async handleCommand(
    command: string,
    chatId: number,
    userId: number
  ): Promise<void> {
    const parts = command.trim().split(/\s+/);
    const cmd = parts[0]?.toLowerCase() || '';

    switch (cmd) {
      case '/start':
        await this.sendWelcomeMessage(chatId);
        break;

      case '/help':
        await this.sendHelpMessage(chatId);
        break;

      case '/send_resume':
        await this.startResumeCollection(chatId, userId);
        break;

      case '/send_job_ad':
        await this.startJobAdCollection(chatId, userId);
        break;

      case '/structure_my_resume':
      case '/structure_resume':
        await this.structureResume(chatId, userId);
        break;

      case '/get_logs':
        await this.sendLogs(chatId);
        break;

      default:
        await this.sendHelpMessage(chatId);
    }
  }

  /**
   * Start resume collection
   */
  private async startResumeCollection(
    chatId: number,
    userId: number
  ): Promise<void> {
    // Create or get session
    let session = await this.sessionService.getSession(userId);
    if (!session) {
      session = this.sessionService.createSession(userId, chatId);
      await this.sessionService.saveSession(session);
    }

    // Set state to collecting resume
    await this.sessionService.updateState(userId, 'collecting_resume');

    await this.telegramService.sendMessage({
      chat_id: chatId,
      text: 'üìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ä–µ–∑—é–º–µ. –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å PDF —Ñ–∞–π–ª.\n\n–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, —Å–∫–∞–∂–∏—Ç–µ "–≥–æ—Ç–æ–≤–æ".',
    });
  }

  /**
   * Start job ad collection
   */
  private async startJobAdCollection(
    chatId: number,
    userId: number
  ): Promise<void> {
    // Create or get session
    let session = await this.sessionService.getSession(userId);
    if (!session) {
      session = this.sessionService.createSession(userId, chatId);
      await this.sessionService.saveSession(session);
    }

    // Set state to collecting job ad
    await this.sessionService.updateState(userId, 'collecting_job_ad');

    await this.telegramService.sendMessage({
      chat_id: chatId,
      text: 'üíº –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏. –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å PDF —Ñ–∞–π–ª.\n\n–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, —Å–∫–∞–∂–∏—Ç–µ "–≥–æ—Ç–æ–≤–æ".',
    });
  }

  /**
   * Handle resume text input
   */
  private async handleResumeText(
    text: string,
    chatId: number,
    userId: number
  ): Promise<void> {
    // Check if this is a "done" command
    if (['–≥–æ—Ç–æ–≤–æ', 'done', '–≥–æ—Ç–æ–≤', 'ok'].includes(text.trim().toLowerCase())) {
      await this.sessionService.updateState(userId, 'idle');
      await this.telegramService.sendMessage({
        chat_id: chatId,
        text: '‚úÖ –†–µ–∑—é–º–µ –ø–æ–ª—É—á–µ–Ω–æ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /send_job_ad –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–∏.',
      });
      return;
    }

    // Append text to resume
    await this.sessionService.appendResumeText(userId, text);

    await this.telegramService.sendMessage({
      chat_id: chatId,
      text: '‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∫ —Ä–µ–∑—é–º–µ. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:',
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚úÖ –ì–æ—Ç–æ–≤–æ —Å —Ä–µ–∑—é–º–µ', callback_data: 'resume_done' }],
        ],
      },
    });
  }

  /**
   * Handle job ad text input
   */
  private async handleJobAdText(
    text: string,
    chatId: number,
    userId: number
  ): Promise<void> {
    // Check if this is a "done" command
    if (['–≥–æ—Ç–æ–≤–æ', 'done', '–≥–æ—Ç–æ–≤', 'ok'].includes(text.trim().toLowerCase())) {
      await this.sessionService.updateState(userId, 'idle');
      await this.telegramService.sendMessage({
        chat_id: chatId,
        text: '‚úÖ –í–∞–∫–∞–Ω—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é.',
      });
      return;
    }

    // Append text to job ad
    await this.sessionService.appendJobAdText(userId, text);

    await this.telegramService.sendMessage({
      chat_id: chatId,
      text: '‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∫ –≤–∞–∫–∞–Ω—Å–∏–∏. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:',
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚úÖ –ì–æ—Ç–æ–≤–æ —Å –≤–∞–∫–∞–Ω—Å–∏–µ–π', callback_data: 'job_done' }],
        ],
      },
    });
  }

  /**
   * Send logs to admin
   */
  private async sendLogs(chatId: number): Promise<void> {
    try {
      // Get environment from process or default
      const environment = process.env.ENVIRONMENT || 'development';

      // Get formatted logs (limit to 20 for readability)
      const logsMessage = await this.loggingService.getFormattedRecentLogs(
        20,
        environment
      );

      await this.telegramService.sendMessage({
        chat_id: chatId,
        text: logsMessage,
      });
    } catch (error) {
      console.error('Error sending logs:', error);
      await this.telegramService.sendMessage({
        chat_id: chatId,
        text: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      });
    }
  }

  /**
   * Send welcome message
   */
  private async sendWelcomeMessage(chatId: number): Promise<void> {
    await this.telegramService.sendMessage({
      chat_id: chatId,
      text: 'üëã –ü—Ä–∏–≤–µ—Ç!\n\n–ö–æ–º–∞–Ω–¥—ã:\n/send_resume - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ\n/send_job_ad - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é\n/get_logs - –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏\n/help - –ø–æ–º–æ—â—å',
    });
  }

  /**
   * Handle document uploads (PDF files)
   */
  private async handleDocumentMessage(
    message: TelegramMessage,
    chatId: number,
    userId: number
  ): Promise<void> {
    const document = message.document!;
    const fileName = document.file_name || 'document';
    const fileSize = document.file_size || 0;

    // Check file size (limit to 10MB)
    if (fileSize > 10 * 1024 * 1024) {
      await this.telegramService.sendMessage({
        chat_id: chatId,
        text: '‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB.',
      });
      return;
    }

    // Check file type (only PDF for now)
    if (!document.mime_type?.includes('pdf')) {
      await this.telegramService.sendMessage({
        chat_id: chatId,
        text: '‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ PDF —Ñ–∞–π–ª—ã.',
      });
      return;
    }

    try {
      // Get current session state
      const session = await this.sessionService.getSession(userId);
      const state = session?.state || 'idle';

      if (state !== 'collecting_resume' && state !== 'collecting_job_ad') {
        await this.telegramService.sendMessage({
          chat_id: chatId,
          text: '‚ùå –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /send_resume –∏–ª–∏ /send_job_ad',
        });
        return;
      }

      // Send processing message
      await this.telegramService.sendMessage({
        chat_id: chatId,
        text: `‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª ${fileName}...`,
      });

      // Download file from Telegram
      const fileInfo = await this.telegramService.getFile(document.file_id);
      if (!fileInfo?.file_path) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ');
      }

      const fileContent = await this.telegramService.downloadFile(
        fileInfo.file_path
      );
      if (!fileContent) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª');
      }

      // Process PDF with Cloudflare AI
      const extractedText = await this.processPDFFile(fileContent, fileName);

      if (!extractedText || extractedText.trim().length === 0) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ PDF —Ñ–∞–π–ª–∞');
      }

      // Add to session based on current state
      if (state === 'collecting_resume') {
        await this.sessionService.appendResumeText(userId, extractedText);
        await this.telegramService.sendMessage({
          chat_id: chatId,
          text: `‚úÖ PDF "${fileName}" –æ–±—Ä–∞–±–æ—Ç–∞–Ω (${extractedText.length} —Å–∏–º–≤–æ–ª–æ–≤).\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:`,
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚úÖ –ì–æ—Ç–æ–≤–æ —Å —Ä–µ–∑—é–º–µ', callback_data: 'resume_done' }],
            ],
          },
        });
      } else if (state === 'collecting_job_ad') {
        await this.sessionService.appendJobAdText(userId, extractedText);
        await this.telegramService.sendMessage({
          chat_id: chatId,
          text: `‚úÖ PDF "${fileName}" –æ–±—Ä–∞–±–æ—Ç–∞–Ω (${extractedText.length} —Å–∏–º–≤–æ–ª–æ–≤).\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:`,
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚úÖ –ì–æ—Ç–æ–≤–æ —Å –≤–∞–∫–∞–Ω—Å–∏–µ–π', callback_data: 'job_done' }],
            ],
          },
        });
      }
    } catch (error) {
      console.error('Error processing document:', error);
      await this.telegramService.sendMessage({
        chat_id: chatId,
        text: `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
      });
    }
  }

  /**
   * Process PDF file using Cloudflare AI
   */
  private async processPDFFile(
    fileContent: ArrayBuffer,
    fileName: string
  ): Promise<string> {
    try {
      if (!this.ai) {
        // Fallback if AI is not available
        console.warn('AI binding not available, using fallback PDF processing');
        return `PDF —Ñ–∞–π–ª "${fileName}" –ø—Ä–∏–Ω—è—Ç. –†–∞–∑–º–µ—Ä: ${Math.round(fileContent.byteLength / 1024)} KB. –î–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ò–ò.`;
      }

      console.log(
        `Processing PDF: ${fileName}, size: ${fileContent.byteLength} bytes`
      );

      // Use Cloudflare AI for PDF text extraction
      // Using @cf/unum/uform-gen2-qwen-500m for document understanding
      const response = await (this.ai as any).run(
        '@cf/unum/uform-gen2-qwen-500m',
        {
          image: [...new Uint8Array(fileContent)], // Convert ArrayBuffer to array for AI
          prompt:
            'Extract all text content from this document. Include all readable text, maintaining the original structure and formatting as much as possible.',
        }
      );

      if (response && response.description) {
        return response.description;
      }

      // If AI response doesn't have expected format, return a basic message
      return `PDF —Ñ–∞–π–ª "${fileName}" –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –ò–∑–≤–ª–µ—á–µ–Ω–æ ${Math.round(fileContent.byteLength / 1024)} KB –¥–∞–Ω–Ω—ã—Ö.`;
    } catch (error) {
      console.error('Error processing PDF:', error);

      // Return a fallback message instead of throwing
      return `PDF —Ñ–∞–π–ª "${fileName}" –ø—Ä–∏–Ω—è—Ç, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É—é.`;
    }
  }

  /**
   * Structure resume using external service
   */
  private async structureResume(chatId: number, userId: number): Promise<void> {
    try {
      // Check if user has resume text
      const resumeText = await this.sessionService.getResumeText(userId);

      if (!resumeText || resumeText.trim().length === 0) {
        await this.telegramService.sendMessage({
          chat_id: chatId,
          text: '‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ä–µ–∑—é–º–µ. –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /send_resume –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—é–º–µ.',
        });
        return;
      }

      // Check if resume text is long enough
      if (resumeText.trim().length < 200) {
        await this.telegramService.sendMessage({
          chat_id: chatId,
          text: '‚ùå –¢–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —Ä–∞–∑–¥–µ–ª—ã: "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã", "–ù–∞–≤—ã–∫–∏", "–ñ–µ–ª–∞–µ–º–∞—è –ø–æ–∑–∏—Ü–∏—è"\n‚Ä¢ –û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–º–∏ –≤–ª–∞–¥–µ–µ—Ç–µ\n‚Ä¢ –ú–∏–Ω–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞',
          parse_mode: 'Markdown',
        });
        return;
      }

      // Send processing message
      await this.telegramService.sendMessage({
        chat_id: chatId,
        text: '‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ —Ä–µ–∑—é–º–µ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.',
      });

      // Process resume with aggressive timeout (skip health check for now)
      console.log('Starting resume processing with timeout...');
      
      const result = await Promise.race([
        this.resumeProcessorService.processResume(resumeText, 'ru'),
        new Promise<never>((_, reject) =>
          setTimeout(
            () => {
              console.log('Processing timeout triggered');
              reject(new Error('Processing timeout - service took too long'));
            },
            15000 // Reduced to 15 seconds
          )
        ),
      ]);

      if (!result.success) {
        await this.telegramService.sendMessage({
          chat_id: chatId,
          text: `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—é–º–µ:\n${result.errors.join('\n')}`,
        });
        return;
      }

      if (!result.data) {
        let errorMessage =
          '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑—é–º–µ.\n\n';
        if (result.errors && result.errors.length > 0) {
          errorMessage += '**–ü—Ä–æ–±–ª–µ–º—ã —Å —Ä–µ–∑—é–º–µ:**\n';
          result.errors.forEach((error) => {
            errorMessage += `‚Ä¢ ${error}\n`;
          });
          errorMessage += '\n**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n';
          errorMessage +=
            '‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ä–µ–∑—é–º–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞–∑–¥–µ–ª—ã: "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã", "–ù–∞–≤—ã–∫–∏", "–ñ–µ–ª–∞–µ–º–∞—è –ø–æ–∑–∏—Ü–∏—è"\n';
          errorMessage += '‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ –∏ –Ω–∞–≤—ã–∫–∞—Ö\n';
          errorMessage += '‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –≤ —Ä–µ–∑—é–º–µ';
        }

        await this.telegramService.sendMessage({
          chat_id: chatId,
          text: errorMessage,
          parse_mode: 'Markdown',
        });
        return;
      }

      // Save structured resume to session
      await this.sessionService.saveStructuredResume(userId, result.data);

      // Format and send the structured resume
      const formattedResume =
        this.resumeProcessorService.formatStructuredResume(result.data);

      // Split message if too long (Telegram limit is 4096 characters)
      const maxLength = 4000; // Leave some buffer
      if (formattedResume.length <= maxLength) {
        await this.telegramService.sendMessage({
          chat_id: chatId,
          text: formattedResume,
          parse_mode: 'Markdown',
        });
      } else {
        // Split into chunks
        const chunks = this.splitMessage(formattedResume, maxLength);
        for (const chunk of chunks) {
          await this.telegramService.sendMessage({
            chat_id: chatId,
            text: chunk,
            parse_mode: 'Markdown',
          });
        }
      }

      // Send additional info
      let additionalInfo = `\n‚úÖ **–†–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ!**\n`;
      additionalInfo += `‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${result.processing_time_ms}–º—Å\n`;

      if (result.unmapped_fields && result.unmapped_fields.length > 0) {
        additionalInfo += `\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø–æ–ª—è: ${result.unmapped_fields.join(', ')}\n`;
      }

      if (result.metadata) {
        additionalInfo += `\nü§ñ –ú–æ–¥–µ–ª—å –ò–ò: ${result.metadata.ai_model_used}`;
      }

      await this.telegramService.sendMessage({
        chat_id: chatId,
        text: additionalInfo,
        parse_mode: 'Markdown',
      });
    } catch (error) {
      console.error('Error structuring resume:', error);
      await this.telegramService.sendMessage({
        chat_id: chatId,
        text: `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–∑—é–º–µ: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
      });
    }
  }

  /**
   * Split long message into chunks
   */
  private splitMessage(text: string, maxLength: number): string[] {
    const chunks: string[] = [];
    let currentChunk = '';

    const lines = text.split('\n');

    for (const line of lines) {
      if (currentChunk.length + line.length + 1 <= maxLength) {
        currentChunk += (currentChunk ? '\n' : '') + line;
      } else {
        if (currentChunk) {
          chunks.push(currentChunk);
        }
        currentChunk = line;
      }
    }

    if (currentChunk) {
      chunks.push(currentChunk);
    }

    return chunks;
  }

  /**
   * Send help message
   */
  private async sendHelpMessage(chatId: number): Promise<void> {
    await this.telegramService.sendMessage({
      chat_id: chatId,
      text: 'ü§ñ –ö–æ–º–∞–Ω–¥—ã:\n\n/send_resume - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ\n/send_job_ad - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é\n/structure_my_resume - —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—é–º–µ\n/get_logs - –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏\n\n–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ PDF —Ñ–∞–π–ª—ã.\n–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Å–ª–æ–≤–æ–º "–≥–æ—Ç–æ–≤–æ" –∏–ª–∏ –∫–Ω–æ–ø–∫–æ–π.',
    });
  }
}
