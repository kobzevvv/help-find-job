/**
 * Telegram conversation handlers
 */

import { TelegramMessage } from '../types/telegram';
import { SessionService } from '../services/session';
import { TelegramService } from '../services/telegram';
import { DocumentService } from '../services/document';
import { AIService } from '../services/ai';
import { EnhancedAIService } from '../services/enhanced-ai';
import { LoggingService } from '../services/logging';
import {
  EnhancedAnalysis,
  HeadlineAnalysis,
  SkillsAnalysis,
  ExperienceAnalysis,
  JobConditionsAnalysis,
} from '../types/session';

export class ConversationHandler {
  private sessionService: SessionService;
  private telegramService: TelegramService;
  private documentService: DocumentService;
  private enhancedAIService: EnhancedAIService;
  private loggingService: LoggingService;
  private environment: string;
  private adminPassword: string;

  constructor(
    sessionService: SessionService,
    telegramService: TelegramService,
    documentService: DocumentService,
    _aiService: AIService, // Keep parameter for backwards compatibility
    enhancedAIService: EnhancedAIService,
    loggingService: LoggingService,
    environment: string = 'development',
    adminPassword: string = 'defaultpassword'
  ) {
    this.sessionService = sessionService;
    this.telegramService = telegramService;
    this.documentService = documentService;
    // aiService parameter kept for backwards compatibility but not stored
    this.enhancedAIService = enhancedAIService;
    this.loggingService = loggingService;
    this.environment = environment;
    this.adminPassword = adminPassword;
  }

  /**
   * Handle incoming message
   */
  async handleMessage(message: TelegramMessage): Promise<void> {
    const userId = message.from?.id;
    const chatId = message.chat.id;

    console.log('üéØ CONVERSATION HANDLER:', {
      userId,
      chatId,
      text: message.text,
      hasFrom: !!message.from,
      timestamp: new Date().toISOString(),
    });

    if (!userId) {
      console.error('‚ùå Missing user ID in message');
      await this.loggingService.logError(
        'INVALID_MESSAGE',
        'No user ID in message',
        new Error('Missing user ID'),
        undefined,
        chatId
      );
      return;
    }

    const messageText =
      message.text || message.document?.file_name || 'non-text message';
    await this.loggingService.logUserMessage(userId, chatId, messageText, {
      messageId: message.message_id,
      messageType: message.text
        ? 'text'
        : message.document
          ? 'document'
          : 'other',
      documentInfo: message.document
        ? {
            fileName: message.document.file_name,
            mimeType: message.document.mime_type,
            fileSize: message.document.file_size,
          }
        : undefined,
    });

    try {
      // Get or create session
      let session = await this.sessionService.getSession(userId);
      if (!session) {
        await this.loggingService.log(
          'INFO',
          'NEW_SESSION',
          'Creating new session for user',
          { userId, chatId }
        );
        session = this.sessionService.createSession(
          userId,
          chatId,
          message.from?.language_code
        );
        await this.sessionService.saveSession(session);
      } else {
        await this.loggingService.log(
          'DEBUG',
          'SESSION_FOUND',
          `Found existing session in state: ${session.state}`,
          {
            userId,
            chatId,
            currentState: session.state,
            sessionAge:
              new Date().getTime() - new Date(session.createdAt).getTime(),
          }
        );
      }

      // Handle different message types based on session state
      if (message.text) {
        await this.handleTextMessage(message, session.state);
      } else if (message.document) {
        await this.handleDocumentMessage(message, session.state);
      } else {
        await this.loggingService.log(
          'WARN',
          'UNSUPPORTED_MESSAGE',
          'Received unsupported message type',
          { messageType: typeof message },
          userId,
          chatId
        );
        await this.sendHelpMessage(chatId);
      }
    } catch (error) {
      console.error('üí• MESSAGE HANDLER ERROR:', error);
      await this.loggingService.logError(
        'MESSAGE_HANDLER_ERROR',
        'Error in message handler',
        error as Error,
        userId,
        chatId
      );
      await this.telegramService.sendMessage({
        chat_id: chatId,
        text: '‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.',
      });
    }
  }

  /**
   * Handle text messages
   */
  private async handleTextMessage(
    message: TelegramMessage,
    currentState: string
  ): Promise<void> {
    const chatId = message.chat.id;
    const userId = message.from!.id;
    const text = message.text!;

    // No more admin login state to handle - simplified!

    // Handle commands
    if (text.startsWith('/')) {
      await this.handleCommand(text, chatId, userId);
      return;
    }

    // Handle conversation flow
    switch (currentState) {
      case 'idle':
        if (this.isMatchRequest(text)) {
          await this.startMatchingProcess(chatId, userId);
        } else {
          await this.sendHelpMessage(chatId);
        }
        break;

      case 'waiting_resume':
        if (['done', '–≥–æ—Ç–æ–≤–æ'].includes(text.trim().toLowerCase())) {
          await this.sessionService.updateState(userId, 'waiting_job_post');
          await this.telegramService.sendMessage({
            chat_id: chatId,
            text: '‚úÖ –°–ø–∞—Å–∏–±–æ! –Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ —Ä–µ–∑—é–º–µ. –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ (–º–æ–∂–Ω–æ –≤ –æ–¥–Ω–æ–º –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö).',
          });
        } else {
          await this.handleResumeText(text, chatId, userId);
        }
        break;

      case 'waiting_job_post':
        await this.handleJobPostText(text, chatId, userId);
        break;

      case 'processing':
        await this.telegramService.sendMessage({
          chat_id: chatId,
          text: '‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –Ø –≤—Å—ë –µ—â—ë –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã...',
        });
        break;

      default:
        await this.sendHelpMessage(chatId);
    }
  }

  /**
   * Handle document uploads
   */
  private async handleDocumentMessage(
    message: TelegramMessage,
    currentState: string
  ): Promise<void> {
    const chatId = message.chat.id;
    const userId = message.from!.id;
    const document = message.document!;

    if (
      currentState !== 'waiting_resume' &&
      currentState !== 'waiting_job_post'
    ) {
      await this.telegramService.sendMessage({
        chat_id: chatId,
        text: '‚ùå –°–µ–π—á–∞—Å —è –Ω–µ –∂–¥—É –¥–æ–∫—É–º–µ–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /resume_and_job_post_match',
      });
      return;
    }

    try {
      // Download and process document
      const fileInfo = await this.telegramService.getFile(document.file_id);
      if (!fileInfo?.file_path) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ');
      }

      const fileContent = await this.telegramService.downloadFile(
        fileInfo.file_path
      );
      if (!fileContent) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª');
      }

      const processedDocument = await this.documentService.processDocument(
        fileContent,
        document.file_name,
        document.mime_type
      );

      if (!processedDocument) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç');
      }

      const validation =
        this.documentService.validateDocument(processedDocument);
      if (!validation.isValid) {
        await this.telegramService.sendMessage({
          chat_id: chatId,
          text: `‚ùå ${validation.error}`,
        });
        return;
      }

      // Save document to session
      if (currentState === 'waiting_resume') {
        await this.sessionService.addResume(userId, processedDocument);
        await this.telegramService.sendMessage({
          chat_id: chatId,
          text: '‚úÖ Resume file received. You can upload more files or paste more resume text. When finished, confirm below:',
          reply_markup: {
            inline_keyboard: [
              [
                { text: '‚úÖ Done with resume', callback_data: 'resume_done' },
                { text: '‚ùå Cancel', callback_data: 'cancel' },
              ],
            ],
          },
        });
      } else if (currentState === 'waiting_job_post') {
        // In the explicit-confirmation flow, any content here is treated as job post
        await this.sessionService.addJobPost(userId, processedDocument);
        await this.startAnalysis(chatId, userId);
      }
    } catch (error) {
      console.error('Error processing document:', error);
      await this.telegramService.sendMessage({
        chat_id: chatId,
        text: `‚ùå –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç: ${error}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏ –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç.`,
      });
    }
  }

  /**
   * Handle bot commands
   */
  private async handleCommand(
    fullText: string,
    chatId: number,
    userId: number
  ): Promise<void> {
    const parts = fullText.trim().split(/\s+/);
    const command = parts.length > 0 && parts[0] ? parts[0].toLowerCase() : '';
    switch (command) {
      case '/start':
        await this.sendWelcomeMessage(chatId);
        break;

      case '/resume_and_job_post_match':
        await this.startMatchingProcess(chatId, userId);
        break;

      case '/help':
        await this.sendHelpMessage(chatId);
        break;

      case '/cancel':
        await this.cancelCurrentProcess(chatId, userId);
        break;

      // Admin/Log commands (simplified - just ask for password)
      case '/get_last_10_messages':
      case '/logs':
        await this.handleSimpleLogCommand(fullText, chatId, userId, 10);
        break;

      case '/get_last_100_messages':
        await this.handleSimpleLogCommand(fullText, chatId, userId, 100);
        break;

      case '/get_last_300_messages':
        await this.handleSimpleLogCommand(fullText, chatId, userId, 300);
        break;

      case '/log_summary':
        await this.handleSimpleLogSummaryCommand(fullText, chatId, userId);
        break;

      case '/test_resume_match':
        await this.handleTestResumeMatch(chatId, userId);
        break;

      default:
        await this.sendHelpMessage(chatId);
    }
  }

  /**
   * Check if text is a matching request
   */
  private isMatchRequest(text: string): boolean {
    const lowerText = text.toLowerCase();
    const keywords = [
      'help match',
      'match resume',
      'compare resume',
      'analyze resume',
      'job match',
      'resume job',
      'check resume',
    ];
    return keywords.some((keyword) => lowerText.includes(keyword));
  }

  /**
   * Start the matching process
   */
  private async startMatchingProcess(
    chatId: number,
    userId: number
  ): Promise<void> {
    await this.sessionService.updateState(userId, 'waiting_resume');
    await this.telegramService.sendMessage({
      chat_id: chatId,
      text: 'üìÑ –Ø –ø–æ–º–æ–≥—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤–∞—à–µ —Ä–µ–∑—é–º–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–∏!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë —Ä–µ–∑—é–º–µ. –ú–æ–∂–Ω–æ:\n‚Ä¢ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª –∏–ª–∏ –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö\n\n–ö–æ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π —Ä–µ–∑—é–º–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ¬´–ì–æ—Ç–æ–≤–æ —Å —Ä–µ–∑—é–º–µ¬ª –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ: \n\n‚úÖ –≥–æ—Ç–æ–≤–æ\n\n–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —è –ø–æ–ø—Ä–æ—à—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏.',
    });
  }

  /**
   * Handle resume text input
   */
  private async handleResumeText(
    text: string,
    chatId: number,
    userId: number
  ): Promise<void> {
    try {
      const processedDocument = this.documentService.processTextInput(text);
      const validation =
        this.documentService.validateDocument(processedDocument);

      if (!validation.isValid) {
        await this.telegramService.sendMessage({
          chat_id: chatId,
          text: `‚ùå ${validation.error}`,
        });
        return;
      }

      // Append resume content while in waiting_resume
      const session = await this.sessionService.getSession(userId);
      if (session?.resume && session.state === 'waiting_resume') {
        const mergedText = `${session.resume.text}\n\n${processedDocument.text}`;
        const mergedResume = this.documentService.processTextInput(mergedText);
        const mergedValidation =
          this.documentService.validateDocument(mergedResume);
        if (!mergedValidation.isValid) {
          await this.telegramService.sendMessage({
            chat_id: chatId,
            text: `‚ùå ${mergedValidation.error}`,
          });
          return;
        }
        await this.sessionService.addResume(userId, mergedResume);
        await this.telegramService.sendMessage({
          chat_id: chatId,
          text: 'üß© –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–µ–∑—é–º–µ. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∏–∂–µ:',
          reply_markup: {
            inline_keyboard: [
              [
                { text: '‚úÖ –ì–æ—Ç–æ–≤–æ —Å —Ä–µ–∑—é–º–µ', callback_data: 'resume_done' },
                { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel' },
              ],
            ],
          },
        });
        return;
      }

      await this.sessionService.addResume(userId, processedDocument);
      await this.telegramService.sendMessage({
        chat_id: chatId,
        text: '‚úÖ –†–µ–∑—é–º–µ –ø–æ–ª—É—á–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∏–∂–µ:',
        reply_markup: {
          inline_keyboard: [
            [
              { text: '‚úÖ –ì–æ—Ç–æ–≤–æ —Å —Ä–µ–∑—é–º–µ', callback_data: 'resume_done' },
              { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel' },
            ],
          ],
        },
      });
    } catch (error) {
      console.error('Error processing resume text:', error);
      await this.telegramService.sendMessage({
        chat_id: chatId,
        text: '‚ùå –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.',
      });
    }
  }

  /**
   * Handle job post text input
   */
  private async handleJobPostText(
    text: string,
    chatId: number,
    userId: number
  ): Promise<void> {
    try {
      const processedDocument = this.documentService.processTextInput(text);
      const validation =
        this.documentService.validateDocument(processedDocument);

      if (!validation.isValid) {
        await this.telegramService.sendMessage({
          chat_id: chatId,
          text: `‚ùå ${validation.error}`,
        });
        return;
      }

      // In explicit-confirmation mode, anything here is treated as job post
      await this.sessionService.addJobPost(userId, processedDocument);
      await this.startAnalysis(chatId, userId);
    } catch (error) {
      console.error('Error processing job post text:', error);
      await this.telegramService.sendMessage({
        chat_id: chatId,
        text: "‚ùå Sorry, I couldn't process that text. Please try again.",
      });
    }
  }

  /**
   * Start AI analysis using enhanced service
   */
  private async startAnalysis(chatId: number, userId: number): Promise<void> {
    try {
      // Fetch session with retries to handle KV eventual consistency after recent writes
      const delay = (ms: number) =>
        new Promise((resolve) => setTimeout(resolve, ms));
      let session = await this.sessionService.getSession(userId);
      let attempt = 0;
      const maxAttempts = 5; // ~3 seconds total with exponential backoff
      while ((!session?.resume || !session?.jobPost) && attempt < maxAttempts) {
        await delay(200 * Math.pow(2, attempt));
        attempt++;
        session = await this.sessionService.getSession(userId);
      }

      if (!session?.resume || !session?.jobPost) {
        // If still missing, guide the user and return without failing the whole flow
        const missing = !session?.resume ? '—Ä–µ–∑—é–º–µ' : '—Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏';
        await this.telegramService.sendMessage({
          chat_id: chatId,
          text: `‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö: ${missing}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ${missing}, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑.`,
        });
        // Put the session back into the appropriate waiting state
        await this.sessionService.updateState(
          userId,
          !session?.resume ? 'waiting_resume' : 'waiting_job_post'
        );
        return;
      }

      // Announce analysis only after we've confirmed both documents are present
      await this.telegramService.sendMessage({
        chat_id: chatId,
        text: 'üîÑ –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ...\n\n–ë—É–¥–µ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ:\n‚Ä¢ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏\n‚Ä¢ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤\n‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–ø—ã—Ç–∞\n‚Ä¢ –£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 60‚Äì90 —Å–µ–∫—É–Ω–¥.',
      });

      console.log('Starting enhanced analysis for user:', userId);
      const enhancedAnalysis =
        await this.enhancedAIService.analyzeResumeJobMatch(
          session.resume,
          session.jobPost
        );

      if (!enhancedAnalysis) {
        throw new Error('Enhanced analysis failed');
      }

      await this.sendEnhancedAnalysisResults(chatId, enhancedAnalysis);
      await this.sessionService.completeSession(userId);
    } catch (error) {
      console.error('Error during enhanced analysis:', error);
      await this.telegramService.sendMessage({
        chat_id: chatId,
        text:
          '‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\n–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: ' +
          (error as Error).message,
      });
      await this.sessionService.completeSession(userId);
    }
  }

  /**
   * Send enhanced analysis results
   */
  private async sendEnhancedAnalysisResults(
    chatId: number,
    analysis: EnhancedAnalysis
  ): Promise<void> {
    // Send summary first
    await this.telegramService.sendMessage({
      chat_id: chatId,
      text: `üìä **–ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ê–ù–ê–õ–ò–ó –†–ï–ó–Æ–ú–ï**\n\n${analysis.summary}\n\nüìà **–ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è: ${analysis.overallScore}/100**`,
      parse_mode: 'Markdown',
    });

    // Send detailed breakdown in separate messages to avoid length limits
    await this.sendHeadlineAnalysis(chatId, analysis.headlines);
    await this.sendSkillsAnalysis(chatId, analysis.skills);
    await this.sendExperienceAnalysis(chatId, analysis.experience);
    await this.sendJobConditionsAnalysis(chatId, analysis.jobConditions);

    // Send final message
    await this.telegramService.sendMessage({
      chat_id: chatId,
      text: 'üí° **–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥—É—é –≤–∞–∫–∞–Ω—Å–∏—é?** –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /resume_and_job_post_match –µ—â—ë —Ä–∞–∑!\n\nüî¨ **–î–ª—è —Ç–µ—Å—Ç–∞** –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ /tests.',
    });
  }

  /**
   * Send headline analysis details
   */
  private async sendHeadlineAnalysis(
    chatId: number,
    headlines: HeadlineAnalysis
  ): Promise<void> {
    const message = `üè∑Ô∏è **–ê–ù–ê–õ–ò–ó –ó–ê–ì–û–õ–û–í–ö–û–í** (${headlines.matchScore}/100)

**–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:** ${headlines.jobTitle}
**–í–∞—à–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏:** ${headlines.candidateTitles.join(', ')}

**–ê–Ω–∞–ª–∏–∑:** ${headlines.explanation}

${headlines.problems.length > 0 ? `üö® **–ü—Ä–æ–±–ª–µ–º—ã:**\n${headlines.problems.map((p: string) => `‚Ä¢ ${p}`).join('\n')}` : ''}

${headlines.recommendations.length > 0 ? `üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n${headlines.recommendations.map((r: string) => `‚Ä¢ ${r}`).join('\n')}` : ''}`;

    await this.telegramService.sendMessage({
      chat_id: chatId,
      text: message,
      parse_mode: 'Markdown',
    });
  }

  /**
   * Send skills analysis details
   */
  private async sendSkillsAnalysis(
    chatId: number,
    skills: SkillsAnalysis
  ): Promise<void> {
    const message = `üõ†Ô∏è **–ê–ù–ê–õ–ò–ó –ù–ê–í–´–ö–û–í** (${skills.matchScore}/100)

**–ù–∞–≤—ã–∫–∏ –∏–∑ –≤–∞–∫–∞–Ω—Å–∏–∏:** ${skills.requestedSkills.join(', ')}
**–í–∞—à–∏ –Ω–∞–≤—ã–∫–∏:** ${skills.candidateSkills.join(', ')}
**‚úÖ –°–æ–≤–ø–∞–¥–∞—é—Ç:** ${skills.matchingSkills.join(', ')}
**‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç:** ${skills.missingSkills.join(', ')}
**‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:** ${skills.additionalSkills.join(', ')}

**–ê–Ω–∞–ª–∏–∑:** ${skills.explanation}

${skills.problems.length > 0 ? `üö® **–ü—Ä–æ–±–ª–µ–º—ã:**\n${skills.problems.map((p: string) => `‚Ä¢ ${p}`).join('\n')}` : ''}

${skills.recommendations.length > 0 ? `üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n${skills.recommendations.map((r: string) => `‚Ä¢ ${r}`).join('\n')}` : ''}`;

    await this.telegramService.sendMessage({
      chat_id: chatId,
      text: message,
      parse_mode: 'Markdown',
    });
  }

  /**
   * Send experience analysis details
   */
  private async sendExperienceAnalysis(
    chatId: number,
    experience: ExperienceAnalysis
  ): Promise<void> {
    const seniorityEmoji =
      experience.seniorityMatch === 'perfect-match'
        ? '‚úÖ'
        : experience.seniorityMatch === 'over-qualified'
          ? '‚¨ÜÔ∏è'
          : '‚¨áÔ∏è';
    const seniorityText =
      experience.seniorityMatch === 'perfect-match'
        ? '–∏–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ'
        : experience.seniorityMatch === 'over-qualified'
          ? '–ø–µ—Ä–µ–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'
          : '–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å';

    const message = `üíº **–ê–ù–ê–õ–ò–ó –û–ü–´–¢–ê** (${experience.experienceMatch}/100)

**–í–∞—à –æ–ø—ã—Ç:** ${experience.candidateExperience.join(', ')}
**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏:** ${experience.jobRequirements.join(', ')}

**–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —É—Ä–æ–≤–Ω—é:** ${seniorityEmoji} ${seniorityText}
${experience.seniorityExplanation}

**–ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ:** ${experience.quantityMatch}/100
${experience.quantityExplanation}

**–ê–Ω–∞–ª–∏–∑:** ${experience.explanation}

${experience.problems.length > 0 ? `üö® **–ü—Ä–æ–±–ª–µ–º—ã:**\n${experience.problems.map((p: string) => `‚Ä¢ ${p}`).join('\n')}` : ''}

${experience.recommendations.length > 0 ? `üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n${experience.recommendations.map((r: string) => `‚Ä¢ ${r}`).join('\n')}` : ''}`;

    await this.telegramService.sendMessage({
      chat_id: chatId,
      text: message,
      parse_mode: 'Markdown',
    });
  }

  /**
   * Send job conditions analysis details
   */
  private async sendJobConditionsAnalysis(
    chatId: number,
    conditions: JobConditionsAnalysis
  ): Promise<void> {
    const locationEmoji = conditions.location.compatible ? '‚úÖ' : '‚ùå';
    const salaryEmoji = conditions.salary.compatible ? '‚úÖ' : '‚ùå';
    const scheduleEmoji = conditions.schedule.compatible ? '‚úÖ' : '‚ùå';
    const formatEmoji = conditions.workFormat.compatible ? '‚úÖ' : '‚ùå';

    const message = `üìç **–ê–ù–ê–õ–ò–ó –£–°–õ–û–í–ò–ô –†–ê–ë–û–¢–´** (${conditions.overallScore}/100)

${locationEmoji} **–õ–æ–∫–∞—Ü–∏—è:** ${conditions.location.jobLocation} vs ${conditions.location.candidateLocation}
${conditions.location.explanation}

${salaryEmoji} **–ó–∞—Ä–ø–ª–∞—Ç–∞:** ${conditions.salary.jobSalary} vs ${conditions.salary.candidateExpectation}
${conditions.salary.explanation}

${scheduleEmoji} **–ì—Ä–∞—Ñ–∏–∫:** ${conditions.schedule.jobSchedule} vs ${conditions.schedule.candidatePreference}
${conditions.schedule.explanation}

${formatEmoji} **–§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã:** ${conditions.workFormat.jobFormat} vs ${conditions.workFormat.candidatePreference}
${conditions.workFormat.explanation}

**–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞:** ${conditions.explanation}`;

    await this.telegramService.sendMessage({
      chat_id: chatId,
      text: message,
      parse_mode: 'Markdown',
    });
  }

  /**
   * Handle test resume match command - uses test files for analysis
   */
  private async handleTestResumeMatch(
    chatId: number,
    _userId: number
  ): Promise<void> {
    try {
      await this.telegramService.sendMessage({
        chat_id: chatId,
        text: 'üß™ **–ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í–û–ì–û –ê–ù–ê–õ–ò–ó–ê**\n\n–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —Ä–µ–∑—é–º–µ –∏ –≤–∞–∫–∞–Ω—Å–∏–∏...\n\n–≠—Ç–æ –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.',
      });

      // Load test files (these should be the test files you provided)
      const testResume = this.documentService.processTextInput(
        this.getTestResumeText()
      );
      const testJobPost = this.documentService.processTextInput(
        this.getTestJobPostText()
      );

      console.log('Running test analysis with enhanced AI service...');
      const enhancedAnalysis =
        await this.enhancedAIService.analyzeResumeJobMatch(
          testResume,
          testJobPost
        );

      if (!enhancedAnalysis) {
        throw new Error('Test analysis failed');
      }

      await this.telegramService.sendMessage({
        chat_id: chatId,
        text: '‚úÖ **–¢–ï–°–¢–û–í–´–ô –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–Å–ù**\n\n–ù–∏–∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:',
      });

      await this.sendEnhancedAnalysisResults(chatId, enhancedAnalysis);
    } catch (error) {
      console.error('Error during test analysis:', error);
      await this.telegramService.sendMessage({
        chat_id: chatId,
        text:
          '‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –æ—à–∏–±–∫–æ–π: ' + (error as Error).message,
      });
    }
  }

  /**
   * Get test resume text
   */
  private getTestResumeText(): string {
    return `–ú—É–∂—á–∏–Ω–∞
–ü—Ä–æ–¥–∞–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä
40 –ª–µ—Ç  ‚Ä¢  –ë—ã–ª –≤—á–µ—Ä–∞
350 000 ‚ÇΩ
–ê–∫—Ç–∏–≤–Ω–æ –∏—â–µ—Ç —Ä–∞–±–æ—Ç—É
–ï—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
–ü–æ—Å–ª–µ–¥–Ω–µ–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã
ITV
–í–µ–¥—É—â–∏–π –ø—Ä–æ–¥–∞–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä  ‚Ä¢  –î–µ–∫–∞–±—Ä—å 2019 ‚Äî –ø–æ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è
- –Ω–∞–ª–∞–∂–∏–≤–∞–Ω–∏–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏, —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á.
- —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.
- —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –µ–≥–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–∞–∑–≤–∏—Ç–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –¥–∞–Ω–Ω—ã—Ö, –æ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤, –∫–ª–∏–µ–Ω—Ç–æ–≤ - —Ä—ã–Ω–∫–∞ –≤ —Ü–µ–ª–æ–º.
- —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –¥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
- –ø—Ä—è–º–æ–µ –∏ –º–∞—Ç—Ä–∏—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, QA, PM, –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ Support, project managers, marketing, –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–º –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞. –°–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö, –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –∏ –∫–æ–Ω–µ—á–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —Ä–∞–∑–ª–∏—á–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è.
- –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ junior product managers
- –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ –∫–æ–º–∞–Ω–¥–µ –ø—Ä–æ–µ–∫—Ç–∞
- –ö–æ–Ω–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏—è —Ü–µ–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ–≤–º–µ—Å—Ç–Ω–æ —Å –∑–∞–∫–∞–∑—á–∏–∫–æ–º –∏ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–º–∏ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏
- –í–µ–¥–µ–Ω–∏–µ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á, —Å–æ–≤–µ—â–∞–Ω–∏–π –∏ –æ–±—Å—É–∂–¥–µ–Ω–∏–π –≤ –∫–æ–º–∞–Ω–¥–µ
- –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ
- –í–Ω–µ–¥—Ä–µ–Ω–∏–µ Agile- –∏ Scrum-–ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∏–ª–∏ –∫–æ–º–ø–∞–Ω–∏–∏
- –î–æ—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ—Å–ª–µ –µ–≥–æ –∑–∞–ø—É—Å–∫–∞
- –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á –∫–æ–º–∞–Ω–¥–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –∏–ª–∏ –¥–æ—Ä–∞–±–æ—Ç–∫—É –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –∏ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è –±—ç–∫–ª–æ–≥–∞ –∑–∞–¥–∞—á –ø—Ä–æ–µ–∫—Ç–∞

- —Ä–∞–∑–≤–∏—Ç–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ b2b2c ‚Äì on premise –∏ cloud –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è CCTV –∏ SAS
- —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –≥–∏–ø–æ—Ç–µ–∑ –∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
- –æ—Ü–µ–Ω–∫–∞, –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∞, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:
–ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –¥–∞—à–±–æ—Ä–¥–æ–≤ –¥–ª—è –∑–∞–¥–∞—á —Ä–∏—Ç–µ–π–ª–∞, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∫–∞—Å—Å–æ–≤—ã–º –ü–û –∏ –ü–û –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏.
–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–∏–¥–∂ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–º–µ—Ä –∏ –∫–∞—Å—Å–æ–≤—ã—Ö —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤ –∫ –æ–±–ª–∞—á–Ω–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–µ
–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã VMS –ø—Ä–æ–¥—É–∫—Ç–∞, –Ω–∞ –±–∞–∑–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π —Ä—ã–Ω–∫–∞ –∏ –Ω–æ–≤—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π
C–æ–∑–¥–∞–Ω–∏–µ Cloud –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è Vsas –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞ –±–∞–∑–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞, –≤–∫–ª—é—á–∞—è: –æ–±—â—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –ø—Ä–æ–¥—É–∫—Ç–∞, frontend –∏ backend, –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç, disaster recovery, multi tenancy, —Å–∏—Å—Ç–µ–º—É –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –∏ –∞—É–¥–∏—Ç–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–µ—Ä –∏ –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤, –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –ø—Ä–æ–¥–∞–∂ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã. –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫ Vsas –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º, —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–º –Ω–∞ –±–∞–∑–µ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤, –≤ —Ç–æ–º —á–∏—Å–ª–µ —Ç–µ–ª–µ–∫–æ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É, –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç—ã—Å—è—á —É—Å—Ç—Ä–æ–π—Å—Ç–≤. –°—Ä–µ–¥–∏ –Ω–∏—Ö –æ–¥–∏–Ω –∏–∑ –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö —Ç–µ–ª–µ–∫–æ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –ò–∑—Ä–∞–∏–ª—è.
–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ
–†–æ—Å—Å–∏—è
–†–µ–≥–∏–æ–Ω –∏ –ø–µ—Ä–µ–µ–∑–¥
–ú–æ—Å–∫–≤–∞`;
  }

  /**
   * Get test job post text
   */
  private getTestJobPostText(): string {
    return `–í–µ–¥—É—â–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º / Senior sales manager. Programmatic-iTV
–°—Ç–∞–Ω–¥–∞—Ä—Ç
–ò—Å—Ç–µ–∫–∞–µ—Ç 03.10
–ú–æ—Å–∫–≤–∞¬∑–û–ø—ã—Ç 3‚Äì6 –ª–µ—Ç¬∑–æ—Ç 280 000 –¥–æ 350 000 ‚ÇΩ –∑–∞ –º–µ—Å—è—Ü, –Ω–∞ —Ä—É–∫–∏

Between Exchange ‚Äì –∫—Ä—É–ø–Ω–µ–π—à–∞—è —Ä–µ–∫–ª–∞–º–Ω–∞—è –±–∏—Ä–∂–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º SSP –∏ DSP –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –Ω–∞ –±–æ–ª–µ–µ —á–µ–º 100 000 –ø–ª–æ—â–∞–¥–æ–∫. –†—É–Ω–µ—Ç + –ê–∑–∏—è. –ù–∞ –¥–µ—Å–∫—Ç–æ–ø–µ, –≤ –º–æ–±–∞–π–ª–µ –∏ Smart TV.

–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:
–ö–æ–Ω–∞–∫—Ç—ã, –≤—Å—Ç—Ä–µ—á–∏, –±—Ä–∏—Ñ—ã, –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–æ–∫

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
–æ–ø—ã—Ç —Å tv-—Ä–µ–∫–ª–∞–º–æ–π
–æ–ø—ã—Ç –≤ –ø—Ä–æ–¥–∞–∂–∞—Ö —Å –¥–ª–∏–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º —Å–¥–µ–ª–∫–∏
–•–æ—Ä–æ—à–æ –ø–æ–Ω–∏–º–∞—Ç—å –≥–¥–µ –ª–µ–∂–∞—Ç –∏ –∫–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –ø–µ—Ä—Ñ–æ–º–∞–Ω—Å–Ω—ã–µ, –æ—Ö–≤–∞—Ç–Ω—ã–µ –∏ –º–µ–¥–∏–π–Ω—ã–µ –±—é–¥–∂–µ—Ç—ã —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–µ–π –∏ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∞–≥–µ–Ω—Ç—Å—Ç–≤.
–ò–º–µ—Ç—å –Ω–∞–ª–∞–∂–µ–Ω–Ω—ã–µ, –∏–¥–µ–∞–ª—å–Ω–æ –µ—Å–ª–∏ –¥—Ä—É–∂–µ—Å–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ª–∏—Ü–∞–º–∏ –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–º–∏ —Ä–µ—à–µ–Ω–∏—è —Å–∞–º–æ–≥–æ –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∞–≥–µ–Ω—Ç—Å—Ç–≤ –∏ –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–µ–π (CEO, CMO, CPO, –∞–∫—Ü–∏–æ–Ω–µ—Ä—ã) –∏ –¢–û–ü-–º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏ Tier 2, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–≤–µ—á–∞—é—Ç –∑–∞ –∑–∞—Ä–∞–±–æ—Ç–æ–∫ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∞–≥–µ–Ω—Ç—Å—Ç–≤

–£—Å–ª–æ–≤–∏—è:
–•–æ—Ä–æ—à–∏–π –æ–∫–ª–∞–¥ + –ø—Ä–æ—Ü–µ–Ω—Ç —Å –ø—Ä–æ–¥–∞–∂
–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ —Ç–∫ —Ä—Ñ

–ö–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏
B2B –ü—Ä–æ–¥–∞–∂–∏
–ú–µ–¥–∏–π–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞
–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏
Digital Marketing
–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏
–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
–¢–µ–ø–ª—ã–µ –ø—Ä–æ–¥–∞–∂–∏
SPIN-–ø—Ä–æ–¥–∞–∂–∏
–ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤

–ì–¥–µ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
–ö—É–∑–Ω–µ—Ü–∫–∏–π –º–æ—Å—Ç, –õ—É–±—è–Ω–∫–∞, –¶–≤–µ—Ç–Ω–æ–π –±—É–ª—å–≤–∞—Ä, –ú–æ—Å–∫–≤–∞, –¢—Ä—É–±–Ω–∞—è –ø–ª–æ—â–∞–¥—å`;
  }

  /**
   * Send welcome message
   */
  private async sendWelcomeMessage(chatId: number): Promise<void> {
    const sent = await this.telegramService.sendMessage({
      chat_id: chatId,
      text: 'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑—é–º–µ –∏ –≤–∞–∫–∞–Ω—Å–∏–∏!\n\n–Ø –ø–æ–º–æ–≥—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–∞—à–µ–≥–æ —Ä–µ–∑—é–º–µ –æ–ø–∏—Å–∞–Ω–∏—é –≤–∞–∫–∞–Ω—Å–∏–∏ —Å –ø–æ–º–æ—â—å—é –ò–ò.\n\nüöÄ –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n/resume_and_job_post_match\n\n‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –û—Ç–ø—Ä–∞–≤—å—Ç–µ /help',
    });
    if (sent) {
      await this.loggingService.logBotResponse(
        0,
        chatId,
        'Welcome message sent'
      );
    } else {
      await this.loggingService.logError(
        'SEND_MESSAGE_FAILED',
        'Failed to send welcome message',
        new Error('sendMessage returned false'),
        0,
        chatId
      );
    }
  }

  /**
   * Send help message
   */
  private async sendHelpMessage(chatId: number): Promise<void> {
    const sent = await this.telegramService.sendMessage({
      chat_id: chatId,
      text: 'ü§ñ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑—é–º–µ\n\n/resume_and_job_post_match - –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ –∏ –≤–∞–∫–∞–Ω—Å–∏–∏\n/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å\n\n–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.',
    });
    if (sent) {
      await this.loggingService.logBotResponse(0, chatId, 'Help message sent');
    } else {
      await this.loggingService.logError(
        'SEND_MESSAGE_FAILED',
        'Failed to send help message',
        new Error('sendMessage returned false'),
        0,
        chatId
      );
    }
  }

  /**
   * Cancel current process
   */
  private async cancelCurrentProcess(
    chatId: number,
    userId: number
  ): Promise<void> {
    await this.sessionService.completeSession(userId);
    await this.telegramService.sendMessage({
      chat_id: chatId,
      text: '‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω—ë–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –∫–æ–º–∞–Ω–¥–æ–π /resume_and_job_post_match',
    });
  }

  /**
   * Get environment-specific admin help message
   */
  private getAdminHelpMessage(command: string): string {
    let environmentInfo = '';

    if (this.environment === 'staging') {
      environmentInfo = `\n\nüîß **Staging Environment**\nPassword: \`${this.adminPassword}\``;
    } else {
      environmentInfo =
        '\n\nüîí **Secure Environment**\nAsk the developer for the password.';
    }

    return `üîë **Admin Command Help**\n\nUsage: \`${command} <password>\`${environmentInfo}\n\nüìã **Available Commands:**\n‚Ä¢ \`/get_last_10_messages <password>\`\n‚Ä¢ \`/get_last_100_messages <password>\`\n‚Ä¢ \`/log_summary <password>\``;
  }

  /**
   * Simple password check for admin commands
   */
  private checkPassword(password: string): boolean {
    return password === this.adminPassword;
  }

  /**
   * Get environment-specific invalid password message
   */
  private getInvalidPasswordMessage(): string {
    if (this.environment === 'staging') {
      return `‚ùå Invalid password for staging environment.\n\nüîë **Staging Password**: \`${this.adminPassword}\`\n\nüí° For staging, use: \`/get_last_10_messages ${this.adminPassword}\``;
    } else if (this.environment === 'production') {
      return `‚ùå Invalid password for production environment.\n\nüîí **Production Access**: Contact the developer for the secure password.`;
    } else {
      return `‚ùå Invalid password for development environment.\n\nüõ†Ô∏è **Development Password**: \`${this.adminPassword}\``;
    }
  }

  /**
   * Handle simplified log command with inline password
   */
  private async handleSimpleLogCommand(
    fullText: string,
    chatId: number,
    userId: number,
    limit: number
  ): Promise<void> {
    try {
      // Parse command: /get_last_10_messages password
      const parts = fullText.trim().split(/\s+/);
      const password = parts[1];

      if (!password) {
        const helpMessage = this.getAdminHelpMessage(
          `/get_last_${limit}_messages`
        );
        const sent = await this.telegramService.sendMessage({
          chat_id: chatId,
          text: helpMessage,
        });
        if (sent) {
          await this.loggingService.logBotResponse(
            userId,
            chatId,
            'Admin help message'
          );
        } else {
          await this.loggingService.logError(
            'SEND_MESSAGE_FAILED',
            'Failed to send admin help message',
            new Error('sendMessage returned false'),
            userId,
            chatId
          );
        }
        return;
      }

      if (!this.checkPassword(password)) {
        const errorMessage = this.getInvalidPasswordMessage();
        const sent = await this.telegramService.sendMessage({
          chat_id: chatId,
          text: errorMessage,
        });
        if (sent) {
          await this.loggingService.logBotResponse(
            userId,
            chatId,
            errorMessage
          );
        } else {
          await this.loggingService.logError(
            'SEND_MESSAGE_FAILED',
            'Failed to send invalid password message',
            new Error('sendMessage returned false'),
            userId,
            chatId
          );
        }
        await this.loggingService.log(
          'WARN',
          'LOG_ACCESS_DENIED',
          'Invalid password for log access',
          { limit },
          userId,
          chatId
        );
        return;
      }

      // Send "loading" message
      const loadingSent = await this.telegramService.sendMessage({
        chat_id: chatId,
        text: `üìä Fetching last ${limit} log messages...`,
      });
      if (loadingSent) {
        await this.loggingService.logBotResponse(
          userId,
          chatId,
          `üìä Fetching last ${limit} log messages...`
        );
      } else {
        await this.loggingService.logError(
          'SEND_MESSAGE_FAILED',
          'Failed to send loading message',
          new Error('sendMessage returned false'),
          userId,
          chatId
        );
        return; // Don't continue if we can't send messages
      }

      // Get formatted logs
      const formattedLogs = await this.loggingService.getFormattedRecentLogs(
        limit,
        this.environment
      );

      // Send logs
      const logsSent = await this.telegramService.sendMessage({
        chat_id: chatId,
        text: formattedLogs,
      });
      if (logsSent) {
        await this.loggingService.logBotResponse(
          userId,
          chatId,
          'Log results sent'
        );
      } else {
        await this.loggingService.logError(
          'SEND_MESSAGE_FAILED',
          'Failed to send log results',
          new Error('sendMessage returned false'),
          userId,
          chatId
        );
      }

      // Log access
      await this.loggingService.log(
        'INFO',
        'LOG_ACCESS_SUCCESS',
        `Viewed last ${limit} messages`,
        { limit },
        userId,
        chatId
      );
    } catch (error) {
      await this.loggingService.logError(
        'LOG_ACCESS_ERROR',
        'Error viewing logs',
        error as Error,
        userId,
        chatId
      );
      await this.telegramService.sendMessage({
        chat_id: chatId,
        text: '‚ùå Error retrieving logs. Please try again.',
      });
    }
  }

  /**
   * Handle simplified log summary command with inline password
   */
  private async handleSimpleLogSummaryCommand(
    fullText: string,
    chatId: number,
    userId: number
  ): Promise<void> {
    try {
      // Parse command: /log_summary password
      const parts = fullText.trim().split(/\s+/);
      const password = parts[1];

      if (!password) {
        const helpMessage = this.getAdminHelpMessage('/log_summary');
        await this.telegramService.sendMessage({
          chat_id: chatId,
          text: helpMessage,
        });
        return;
      }

      if (!this.checkPassword(password)) {
        const errorMessage = this.getInvalidPasswordMessage();
        await this.telegramService.sendMessage({
          chat_id: chatId,
          text: errorMessage,
        });
        await this.loggingService.log(
          'WARN',
          'LOG_SUMMARY_ACCESS_DENIED',
          'Invalid password for log summary access',
          {},
          userId,
          chatId
        );
        return;
      }

      // Send "loading" message
      const loadingSent = await this.telegramService.sendMessage({
        chat_id: chatId,
        text: 'üìä Generating log summary...',
      });
      if (loadingSent) {
        await this.loggingService.logBotResponse(
          userId,
          chatId,
          'üìä Generating log summary...'
        );
      } else {
        await this.loggingService.logError(
          'SEND_MESSAGE_FAILED',
          'Failed to send loading message',
          new Error('sendMessage returned false'),
          userId,
          chatId
        );
        return; // Don't continue if we can't send messages
      }

      // Get log summary
      const summary = await this.loggingService.getAdminLogSummary(24);

      const summarySent = await this.telegramService.sendMessage({
        chat_id: chatId,
        text: summary,
      });
      if (summarySent) {
        await this.loggingService.logBotResponse(
          userId,
          chatId,
          'Log summary sent'
        );
      } else {
        await this.loggingService.logError(
          'SEND_MESSAGE_FAILED',
          'Failed to send log summary',
          new Error('sendMessage returned false'),
          userId,
          chatId
        );
      }

      // Log access
      await this.loggingService.log(
        'INFO',
        'LOG_SUMMARY_SUCCESS',
        'Viewed log summary',
        {},
        userId,
        chatId
      );
    } catch (error) {
      await this.loggingService.logError(
        'LOG_SUMMARY_ERROR',
        'Error generating log summary',
        error as Error,
        userId,
        chatId
      );
      await this.telegramService.sendMessage({
        chat_id: chatId,
        text: '‚ùå Error generating log summary. Please try again.',
      });
    }
  }
}
